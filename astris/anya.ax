#
# Anya's Astris script
# 
# Brings up device to Anya mode - basically SecureROM DFU,
# but with custom handle_interface_request() that decrypts
# KBAGs sent over USB
#
# The custom handler is at tarmpoline base, thus we need
# to make that place executable
#
# Please note that only 16K devices are supported at this moment
#

namespace eval ::anya {
    #
    # Data providers 
    #

    set soc [::astris::console::native::soc full]

    proc data_provider_error {} {
        variable soc
        error [format "failed to get \"%s\" for %s" [info level -1] $soc]
    }

    proc l2_page_size {} {
        return 0x2000000
    }

    proc l3_page_size {} {
        return 0x4000
    }

    proc main_core {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return ECORE0 }
            default  {
                data_provider_error
            }
        }
    }

    proc is_mmu_late_deal {} {
        return 0
    }

    proc before_tlb_flush {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return 0x10000180C }
            default  {
                data_provider_error
            }
        }
    }

    proc sram_base {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return 0x19C000000 }
            default  {
                data_provider_error
            }
        }
    }

    proc trampoline {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return 0x19C018000 }
            default  {
                data_provider_error
            }
        }
    }

    proc platform_get_force_dfu_ret {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return 0x1000079AC }
            default  {
                data_provider_error
            }
        }
    }

    proc handle_interface_request_intercept {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return 0x10000EF04 }
            default  {
                data_provider_error
            }
        }
    }

    proc handle_interface_request_intercept_reg {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return x9 }
            default  {
                data_provider_error
            }
        }
    }

    proc platform_get_iboot_flags_ret {} {
        variable soc
        switch $soc {
            "Cebu B0"   -
            "Cebu B1"   { return 0x10000679C }
            default  {
                data_provider_error
            }
        }
    }

    #
    # Flow routines
    #

    proc wait_for_state {state} {
        while {true} {
            if {[::astris::console::native::support::check_state [list $state]]} {
                return
            } else {
                after 50
            }
        }
    }

    proc wait_for_bp {addr} {
        set bp [::astris::console::native::bp set $addr]
        ::astris::console::native::go
        wait_for_state "HardwareBreak"
        ::astris::console::native::bp clear $bp
    }

    proc wait_for_run {} {
        ::astris::console::native::go 
        wait_for_state "Run"
    }

    #
    # Logic routines
    #

    proc mmu_l3_page_make {addr} {
        set addr [expr $addr >> 14]
        set e 0b11            
        set e [expr $e | 1 << 2]
        set e [expr $e | 0b111 << 5]
        set e [expr $e | 0b11 << 9]
        set e [expr $e | $addr << 14]
        
        return $e
    }

    proc mmu_l3_page_entry_find {table page} {
        return [expr $table + $page * 8]
    }

    proc mmu_l3_table_find {ttbr base} {
        set table_entry_addr [expr $ttbr + $base / [l2_page_size] * 0x8]
        set table_entry [::astris::console::native::mem -64 $table_entry_addr]
        return [expr $table_entry >> 14 << 14 & 0xFFFFFFFFF]
    }

    proc mmu_rx_page_set {base addr} {
        set ttbr [::astris::console::native::reg ttbr0_el1]
        set table [mmu_l3_table_find $ttbr $base]
        set page_entry [mmu_l3_page_entry_find $table [expr [expr $addr - $base] / [l3_page_size]]]
        ::astris::console::native::mem -64 $page_entry [mmu_l3_page_make $addr]
    }

    proc mmu_deal {} {
        variable payload
        variable payload_base

        puts "Dealing with MMU..."
        
        wait_for_bp [before_tlb_flush]

        puts "Uploading USB handler..."
        ::astris::console::native::load $payload $payload_base

        mmu_rx_page_set [sram_base] $payload_base
    }

    #
    # Actual logic
    #

    if {![info exists env(ANYA_PAYLOAD)]} {
        error "ANYA_PAYLOAD variable not set"
    }

    set payload $::env(ANYA_PAYLOAD)
    set payload_base [trampoline]

    ::astris::console::native::cpu [main_core]

    puts "Fromresetting device..."
    ::astris::soc::fromreset

    if {![is_mmu_late_deal]} {
        mmu_deal
    }

    puts "Forcing DFU..."
    wait_for_bp [platform_get_force_dfu_ret]
    ::astris::console::native::reg x0 0x1

    if {[is_mmu_late_deal]} {
        mmu_deal
    }

    puts "Patching iBoot flags..."
    wait_for_bp [platform_get_iboot_flags_ret]
    ::astris::console::native::reg x0 [expr [::astris::console::native::reg x0] | [expr 1 << 6]]

    puts "Overriding USB handler ptr..."
    wait_for_bp [handle_interface_request_intercept]
    ::astris::console::native::reg [handle_interface_request_intercept_reg] $payload_base

    wait_for_run

    puts "DONE!"
}
