#!/usr/bin/env python3

import argparse
from time import time
from secrets import token_bytes

from anya import *
from anya.exceptions import *

def main():
    parser = argparse.ArgumentParser(description='Decrypt some KBAG or run a benchmark')
    parser.add_argument("-k", dest="kbag", help="decrypt a KBAG")
    parser.add_argument("-b", dest="count", type=int, help="run benchmark")
    parser.add_argument("-e", dest="ecid", type=int, help="ECID to look for")
    args = parser.parse_args()

    if (not args.kbag and not args.count) or (args.kbag and args.count):
        parser.print_help()
        exit(-1)

    dev = AnyaDevice(ecid=args.ecid)

    try:
        dev.connect()
    except AnyaError as e:
        print("failed to connect: %s" % str(e))
        exit(-1)

    if args.kbag:
        try:
            decoded = decode_kbag(args.kbag)
        except AnyaValueError as e:
            print("failed to parse KBAG: %s" % str(e))
            exit(-1)

        try:
            key = dev.decrypt_kbag(decoded)
        except AnyaUSBError as e:
            print("failed to decrypt KBAG: %s" % str(e))
            exit(-1)

        print(encode_key(key, True))

    elif args.count:
        kbags = set()

        for i in range(args.count):
            kbags.add(bytes(token_bytes(KBAG_SIZE)))

        print("decrypting...")

        start = time()

        for kbag in kbags:
            try:
                key = dev.decrypt_kbag(kbag)
            except AnyaUSBError as e:
                print("failed to decrypt KBAG: %s" % str(e))
                exit(-1)

        end = time()

        delta = end - start
        average = args.count / delta

        print("decrypted %d KBAGs in %.6f seconds, average - %.6f KBAGs/sec" % (args.count, delta, average))


if __name__ == '__main__':
    main()
